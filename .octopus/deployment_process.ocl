step "kustomize" {
    name = "Kustomize Parent"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "Qwerty"
    }

    action "kustomize" {
        name = "Kustomize Child One Updated 2"

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-1"
            git_credential_type = "Library"
            repository_uri = "https://github.com/tleed5/OctopusVCSTest.git"
        }

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "feed"
            package_id = "nginx"
        }

        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = 180
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "foobar/"
            Octopus.Action.Kubernetes.ResourceStatusCheck = true
            Octopus.Action.KubernetesContainers.DeploymentWait = false
            Octopus.Action.SubstituteInFiles.TargetFiles = "*.yaml"
        }
    }

    action "kustomize-child" {
        name = "Kustomize Child Two"

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-1"
            git_credential_type = "Library"
            repository_uri = "https://github.com/tleed5/OctopusVCSTest.git"
        }

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "feed"
            package_id = "nginx"
        }

        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = 180
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "foobar/"
            Octopus.Action.Kubernetes.ResourceStatusCheck = true
            Octopus.Action.KubernetesContainers.DeploymentWait = false
            Octopus.Action.SubstituteInFiles.TargetFiles = "*.yaml"
        }
    }
}

step "kustomize-1" {
    condition = "Always"
    name = "Kustomize Two"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "LocalK8s"
    }
    start_trigger = "StartWithPrevious"

    action {
        environments = ["development", "staging", "production"]
        is_required = true

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-1"
            git_credential_type = "Library"
            repository_uri = "https://github.com/tleed5/OctopusVCSTest.git"
        }

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "feed"
            package_id = "nginx"
        }

        packages "k8s-workertools" {
            acquisition_location = "NotAcquired"
            feed = "feed"
            package_id = "octopuslabs/k8s-workertools"
        }

        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = 180
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "foobar/"
            Octopus.Action.Kubernetes.ResourceStatusCheck = true
            Octopus.Action.KubernetesContainers.DeploymentWait = false
            Octopus.Action.SubstituteInFiles.TargetFiles = "*.yaml"
        }
    }
}